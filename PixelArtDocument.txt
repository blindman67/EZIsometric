PixelArt Document.


To use pixelArt include the file pixelArt.js in your page. If you are using it with other EZIsometric module place it after the other modules

The interface will appear as EZIsometric.pixelArt

PixelArt uses the abstract bitmap to define a bitmapped image, and pixels to define pixel data

bitmaps, pixels and images are interchangeable so functions can be passed any of these object if the arguments specifies bitmaps, pixels, or image. The argument name reflects the optimal format

Style refers to colour (for the moment) and can be the CSS formatted #RGB or #RRGGBB strings, or an array of 4 bytes  [R,G,B,A] all in the range of 0-255, or a pattern (use EZIsometric.color.linePattern) and represents a linear list of colours used to draw lines, edges and more.

EZIsometric.pixelArt rendering function 

darken(bitmap,[amount])
    Reduces the value of all pixels. 
    bitmap can be image, pixels, or bitmap
    amount is optional and defaults to 0.5. Amount is the amount of darking applied 0 is no darkening and 1 will return a black image
    If the amount is 0 then the function exits early returning the original bitmap, image, or pixels without modification
    If the amount > 0 the function returns the original bitmap in the original format except for images, they are returned as a new bitmap
lighten(bitmap,[amount])
    Increases the value of all pixels.  See darken for more information
   
trim(bitmap)
    trims the bitmap of transparent edges
    The returned bitmap may or may not be a copy
    If the bitmap has no visible pixels then the original bitmap is returned as the result would be an empty bitmap (thought I am still working out what to do in these cases)
    If the bitmap has nothing to trim the original bitmap is returned
    If trimmed a copy is made and returned in the same format, unless the bitmap is an image in which case it is converted to a bitmap
drawLine(bitmap, x, y, xx, yy, style1, [style2, [skipStart]])
    draws a non anti aliased line from x,y to xx,yy
    style1 the colour (or pattern);
    optional style2 if included the colour will be blended across the line distance
    optional skipStart if true will not render the first pixel. Defaults to false. Use when connecting lines
drawRect(bitmap, x, y, w, h, style, [scalePattern])
    Draw a line around a rectangle (similar to ctx.strokeRect)
drawFillRect(bitmap, x, y, w, h, style)
   Fills a rectangle
floodFill(bitmap, x, y, style, tolerance, [diagonal, [edgeMask]])
    Fills area with a colour
    bitmap is the image to fill
    x,y the location to start the fill
    style the colour of the fill
    tolerance The fill tolerance. The higher the value the more pixels are filled (range 0-255)
    diagonal if true then will fill along diagonal pixels. Alowing fill to fill pixel lines, where pixel corners only touch. Defaults to false;
    edgeMask Optional. the bits from 0 to 3 if set indicate which side be coloured. When set only pixels at the edge of the fill will be filled. Defaults to 0 (no edgeFill)
        Note if using edge fill supplying a single colour will fill all the selected edges that colour, if you provide a pattern then you can set the colours of up to 16 edge conditions
       
        Shows which bits  represent which sides
          bit 1
         ______
         |    |
   bit 0 |    | bit 2
         |____|
          bit 3
         
         To fill only top edges edgeMask = 0b0010  (bit 0 is the right most bit in the binary number)
         To Fill the right and bottom edges edgeMask = 0b1100
         to Fill all edges edgeMask = 0b1111
         Pattern colours are in order and represent edges as follows
         EZIsometric.color.linePattern([no edges,left,top,right,bottom,top-Left, top-right corner,bottom-right, bottom-left, left-top-right, top-right-bottom, right-bottom-left, left-right, top-bottom, and left-top-right-bottom]);
         So a pixel that is touching only the left edge is left
         A pixel the is touching the left and top edges is left-top
         
         
         
bitmapToISOFace(bitmap,face)
    Transforms the bitmap to align to the selected face
    bitmap is the bitmap to transform
    face is the face to transform to can be any of
        EZIsometric.pixelArt.faces or EZIsometric.CONSTS.sides
        Faces are one of front,back,left,right,top or bottom
    Returns a new bitmap
pixelsToBitmap(pixels) // requires pixels (not bitmap or image)
    Creates a bitmap from pixels. The bitmaps size will fit the pixel data size
    pixels the pixels used to create the bitmap
    returns a new bitmap
putPixels(pixels,bitmap,[x,[y]]) // requires pixels and bitmap 
   Puts pixels onto a bitmap at optional x,y coord
    pixels the pixel data to put into the image
    bitmap the bitmap to receive the pixels
    x the position of top left. Defaults to 0
    y the position of top left. Defaults to 0
    returns the bitmap
        Note that if there is no room to fit the pixels extra pixels will be trimed
        
getPixels(bitmap,[x,[y,[width,[height]]]])
    Gets pixels from a bitmap. x,y,width and height are optional and default to include the whole image    
    bitmap can be Image ,pixels, or bitmap
    x top left x position of area Defaults to 0
    y top left x position of area Defaults to 0
    width  Do I have to type what they widths means??? You guess Defaults to bitmap width
    height Defaults to bitmap height
    returns pixels
copyBitmap(bitmap)
    Creates a copy of the bitmap
    bitmap can be Image,pixels, or bitmap
    returns a new bitmap
imageToBitmap(image)
    Converts a HTMLImageElement into a bitmap
    image is a HTMLImageElement
    returns a copy as bitmap
createBitmap([width,[height]])
    Creates a new bitmap
    width is the width. Defaults to 256
    height is the height. Defaults to 256
    returns a bitmap
color.linePattern(styles)
    Creates a style pattern
    styles is an array of styles
    returns a new pattern
    
Pattern Object can be created via EZIsometric.pixelArt.color.linePattern
Pattern should only be modified via the color interface. It contains a 1D array of colour values (optimised for both pixel and 2D context rendering)
To create a pattern call EZIsometric.pixelArt.color.linePattern with an array of colour values

var pat1 = EZIsometric.pixelArt.color.linePattern(["#FFF","#000"]); // create a black and white pattern
var pat2 = EZIsometric.pixelArt.color.linePattern(["#F00","#0F0","#00F"]); // create a Red Green Blue pattern
var pat3 = EZIsometric.pixelArt.color.linePattern(["#000",[0,0,0,0],[0,0,0,0]]); // create a black then two transparent pixel pattern

To render using the pattern simply pass the pattern as the style argument
bitmap = EZIsometric.pixelArt.drawLine(bitmap,x,y,xx,yy,pat1);

The pattern remembers the last position that was rendered. Thus if a line is drawn and it ends on the 3rd pixel of 10 in the pattern then the next time the pattern is used it will start at the 4th. Because line drawLine draw the first and last pixel off the line joining two lines with a pattern can result in skipping a pattern colour due to the first pixel of the second line being drawn over the last pixel of the first line. To prevent this pass false as the skipFirst (optional) argument for line.

To return the pattern to the start position call the home function. The home function returns the pattern so that calls can be chained, or home can be called when passing a pattern as an argument.

pat1.home(); // resets the pattern
bitmap = EZIsometric.pixelArt.drawLine(bitmap,x,y,xx,yy,pat1); 

or 

bitmap = EZIsometric.pixelArt.drawLine(bitmap,x,y,xx,yy,pat1.home()); 


The pattern can be scaled and reversed
pat1.scale = 2; // half the scale
pat1.scale = 0.5; // doubles the scale
pat1.scale = -1; // reverse the pattern direction
pat1.scale = 0; // Patter does not move so current pattern location is drawn indefinitely

The scale can be set to fit a given length by calling

pattern =  EZIsometric.pixelArt.color.linePattern(["#000",[0,0,0,0],[0,0,0,0]]); 
pattern.setScaleToLength(21); // the pattern repeats every 21 pixels
pattern = EZIsometric.pixelArt.color.linePattern(["#F00","#0F0","#00F"]); // create a Red Green Blue pattern
pattern.setScaleToLength(-100); // the pattern repeats every 100 pixels and is reversed

pattern.home().setScaleToLength(20); // set pattern position home and length 20 pixels


To set the current position of the pattern call position(). Position returns the pattern. Negative values set the index from the pattern length pattern(-1) set the pattern current position to the last colour. The value passed to position is floored before setting the current index. Thus 0.5 becomes 0 and -0.5 becomes 0. Keep in mind that negative numbers floor upward.

pattern.position(index)

